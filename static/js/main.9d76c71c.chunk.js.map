{"version":3,"sources":["header.js","memegenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","src","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImages","handleChange","bind","handleSubmit","fetch","proxyurl","then","response","json","memes","data","setState","catch","error","console","log","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","className","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2KAaeA,MATf,WACE,OACE,gCACA,yBAAKC,IAAI,iEAAiEC,IAAI,YAC9E,+C,0CCgEWC,E,kDAnEd,aAAc,IAAD,8BACZ,gBACKC,MAAM,CACVC,QAAQ,GACRC,WAAW,GACXC,UAAU,gCACVC,cAAc,IAEf,EAAKC,aAAa,EAAKA,aAAaC,KAAlB,gBAClB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,gBATN,E,gEAYO,IAAD,OAGlBE,MAAMC,wEACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAC,GAAW,IAETE,EAAOF,EAASG,KAAhBD,MACP,EAAKE,SAAS,CACbX,cAAcS,OAGfG,OAAM,SAASC,GACdC,QAAQC,IAAIF,Q,mCAIFG,GAAO,IAAD,EACGA,EAAMC,OAAlBC,EADS,EACTA,KAAKC,EADI,EACJA,MACZC,KAAKT,SAAL,eACEO,EAAMC,M,mCAKEH,GAEdA,EAAMK,iBAEN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAASL,KAAKxB,MAAMI,cAAc0B,QAC5DC,EAAYP,KAAKxB,MAAMI,cAAcsB,GAASM,IACpDR,KAAKT,SAAS,CACbZ,UAAU4B,M,+BAKT,OACC,6BACG,0BAAME,UAAU,YAAYC,SAAUV,KAAKjB,cAC3C,2BAAO4B,KAAK,OAAOb,KAAK,UAAUc,YAAY,WAAWb,MAAOC,KAAKxB,MAAMC,QAASoC,SAAUb,KAAKnB,eAClG,2BAAO8B,KAAK,OAAOb,KAAK,aAAac,YAAY,cAAcb,MAAOC,KAAKxB,MAAME,WAAYmC,SAAUb,KAAKnB,eAC7G,wCAEF,yBAAK4B,UAAU,QACd,yBAAKpC,IAAK2B,KAAKxB,MAAMG,UAAWL,IAAI,KACpC,wBAAImC,UAAU,OAAOT,KAAKxB,MAAMC,SAEhC,wBAAIgC,UAAU,UAAUT,KAAKxB,MAAME,kB,GA7DZoC,IAAMC,W,MCWnBC,MATf,WACE,OACE,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEeC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,a","file":"static/js/main.9d76c71c.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nfunction Header() {\r\n  return (\r\n    <header>\r\n    <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface.png\" alt=\"problem\"/>\r\n    <p>Meme Generator</p>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\n\r\n\r\nclass MemeGenerator extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state={\r\n\t\t\ttopText:\"\",\r\n\t\t\tbottomText:\"\",\r\n\t\t\trandomImg:\"http://i.imgflip.com/1bij.jpg\",\r\n\t\t\tallMemeImages:[]\r\n\t\t}\r\n\t\tthis.handleChange=this.handleChange.bind(this);\r\n\t\tthis.handleSubmit=this.handleSubmit.bind(this);\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n      const myurl=\"http://api.imgflip.com/get_memes\";\r\n\t\tfetch(proxyurl+myurl)\r\n\t\t.then(response=>response.json())\r\n\t\t.then(response=>{\r\n\r\n\t\t\tconst {memes}=response.data;\r\n\t\t\tthis.setState({\r\n\t\t\t\tallMemeImages:memes\r\n\t\t\t})\r\n\t\t})\r\n\t\t.catch(function(error) {\r\n    console.log(error);\r\n  }); \r\n\t}\r\n\r\n\thandleChange(event){\r\n    const {name,value}=event.target;\r\n    this.setState({\r\n    \t[name]:value,\r\n    })\r\n\r\n\r\n\t}\r\n\thandleSubmit(event){\r\n\r\nevent.preventDefault();\r\n\r\nconst randNum = Math.floor(Math.random()*this.state.allMemeImages.length);\r\nconst randMemeImg=this.state.allMemeImages[randNum].url;\r\nthis.setState({\r\n\trandomImg:randMemeImg\r\n})\r\n\r\n\t}\r\n\trender(){\r\n  return (\r\n   <div>\r\n      <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n      <input type=\"text\" name=\"topText\" placeholder=\"Top Text\" value={this.state.topText} onChange={this.handleChange}/>\r\n       <input type=\"text\" name=\"bottomText\" placeholder=\"Bottom Text\" value={this.state.bottomText} onChange={this.handleChange}/>\r\n      <button>Gen</button>\r\n      </form>\r\n    <div className=\"meme\">\r\n     <img src={this.state.randomImg} alt=\"\"/>\r\n   \t\t<h2 className=\"top\">{this.state.topText}</h2>  \r\n\r\n   \t\t<h2 className=\"bottom\">{this.state.bottomText}</h2>  \r\n    </div>\r\n   </div>\r\n  )}\r\n\r\n}\r\n\r\nexport default MemeGenerator;\r\n","import React from 'react';\nimport Header from './header'\nimport MemeGenerator from './memegenerator'\nimport './index.css'\n\n\nfunction App() {\n  return (\n    <div>\n     <Header/>\n     <MemeGenerator/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}